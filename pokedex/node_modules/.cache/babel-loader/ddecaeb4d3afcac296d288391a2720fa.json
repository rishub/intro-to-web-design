{"ast":null,"code":"var _jsxFileName = \"/Users/rishubkumar/Desktop/pokedex/src/App.js\";\nimport React, { useState } from 'react';\nimport startingPokemonList from './pokemon'; // ./ means check the current directory for this file\n\nimport './App.css'; // every component gets props\n// props is an object containing all of the items that are passed into the component\n// this is a component\n\nfunction Pokemon(props) {\n  // this is equivalent to\n  // const pokemon = props.pokemon;\n  const {\n    pokemon,\n    index,\n    markAsCaught\n  } = props;\n  let caughtText = \"Not caught\"; // this is true if its 1 and false if its 0\n\n  if (pokemon.caught) {\n    caughtText = \"Caught\";\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pokemonRow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, pokemon.name), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, pokemon.type), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, caughtText), !pokemon.caught && /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => markAsCaught(index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 27\n    }\n  }, \"Catch\"));\n}\n\nfunction App() {\n  const [pokemonList, setPokemonList] = useState(startingPokemonList);\n  const [searchTerm, setSearchTerm] = useState(\"\"); // this function marks a pokemon as caught using its index\n\n  const markAsCaught = index => {\n    // these two lines clone the object and allow react to update the state\n    // JSON.stringify converts the array to a string\n    // JSON.parse converts the string to an array\n    // together, they create a clone of the array as a new array\n    const stringPokemonList = JSON.stringify(pokemonList);\n    const clonedPokemonList = JSON.parse(stringPokemonList);\n    clonedPokemonList[index].caught = 1; // 1 means the pokemon is caught\n\n    setPokemonList(clonedPokemonList);\n  };\n\n  const filterPokemon = e => {\n    const search = e.target.value.toLowerCase();\n    setSearchTerm(search);\n  };\n\n  const filteredPokemonList = clonedPokemonList.filter(pokemon => {\n    return pokemon.name.toLowerCase().includes(search); // checks if the pokemons name is in the search bar\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, \"Pokedex\"), \"Search: \", /*#__PURE__*/React.createElement(\"input\", {\n    className: \"searchBar\",\n    onChange: filterPokemon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }\n  }), pokemonList.map((pokemon, index) => {\n    return /*#__PURE__*/React.createElement(Pokemon, {\n      pokemon: pokemon,\n      index: index,\n      markAsCaught: markAsCaught,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 16\n      }\n    });\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/rishubkumar/Desktop/pokedex/src/App.js"],"names":["React","useState","startingPokemonList","Pokemon","props","pokemon","index","markAsCaught","caughtText","caught","name","type","App","pokemonList","setPokemonList","searchTerm","setSearchTerm","stringPokemonList","JSON","stringify","clonedPokemonList","parse","filterPokemon","e","search","target","value","toLowerCase","filteredPokemonList","filter","includes","map"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,mBAAP,MAAgC,WAAhC,C,CAA6C;;AAC7C,OAAO,WAAP,C,CAEA;AACA;AACA;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACtB;AACA;AACA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAAmCH,KAAzC;AAEA,MAAII,UAAU,GAAG,YAAjB,CALsB,CAOtB;;AACA,MAAIH,OAAO,CAACI,MAAZ,EAAoB;AAClBD,IAAAA,UAAU,GAAG,QAAb;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMH,OAAO,CAACK,IAAd,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAML,OAAO,CAACM,IAAd,CAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMH,UAAN,CAHF,EAKG,CAACH,OAAO,CAACI,MAAT,iBAAmB;AAAQ,IAAA,OAAO,EAAE,MAAMF,YAAY,CAACD,KAAD,CAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aALtB,CADF;AASD;;AAED,SAASM,GAAT,GAAe;AACb,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCb,QAAQ,CAACC,mBAAD,CAA9C;AACA,QAAM,CAACa,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,CAAC,EAAD,CAA5C,CAFa,CAIb;;AACA,QAAMM,YAAY,GAAGD,KAAK,IAAI;AAC5B;AACA;AACA;AACA;AACA,UAAMW,iBAAiB,GAAGC,IAAI,CAACC,SAAL,CAAeN,WAAf,CAA1B;AACA,UAAMO,iBAAiB,GAAGF,IAAI,CAACG,KAAL,CAAWJ,iBAAX,CAA1B;AAEAG,IAAAA,iBAAiB,CAACd,KAAD,CAAjB,CAAyBG,MAAzB,GAAkC,CAAlC,CAR4B,CAQS;;AAErCK,IAAAA,cAAc,CAACM,iBAAD,CAAd;AACD,GAXD;;AAaA,QAAME,aAAa,GAAGC,CAAC,IAAI;AACzB,UAAMC,MAAM,GAAGD,CAAC,CAACE,MAAF,CAASC,KAAT,CAAeC,WAAf,EAAf;AACAX,IAAAA,aAAa,CAACQ,MAAD,CAAb;AACD,GAHD;;AAKA,QAAMI,mBAAmB,GAAGR,iBAAiB,CAACS,MAAlB,CAAyBxB,OAAO,IAAI;AAC9D,WAAOA,OAAO,CAACK,IAAR,CAAaiB,WAAb,GAA2BG,QAA3B,CAAoCN,MAApC,CAAP,CAD8D,CACV;AACrD,GAF2B,CAA5B;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,2BAEU;AAAO,IAAA,SAAS,EAAC,WAAjB;AAA6B,IAAA,QAAQ,EAAEF,aAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFV,EAGGT,WAAW,CAACkB,GAAZ,CAAgB,CAAC1B,OAAD,EAAUC,KAAV,KAAoB;AACnC,wBAAO,oBAAC,OAAD;AAAS,MAAA,OAAO,EAAED,OAAlB;AAA2B,MAAA,KAAK,EAAEC,KAAlC;AAAyC,MAAA,YAAY,EAAEC,YAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFA,CAHH,CADF;AASD;;AAED,eAAeK,GAAf","sourcesContent":["import React, { useState } from 'react';\nimport startingPokemonList from './pokemon'; // ./ means check the current directory for this file\nimport './App.css';\n\n// every component gets props\n// props is an object containing all of the items that are passed into the component\n// this is a component\nfunction Pokemon(props) { \n  // this is equivalent to\n  // const pokemon = props.pokemon;\n  const { pokemon, index, markAsCaught } = props;\n\n  let caughtText = \"Not caught\";\n\n  // this is true if its 1 and false if its 0\n  if (pokemon.caught) {\n    caughtText = \"Caught\";\n  }\n\n  return (\n    <div className=\"pokemonRow\">\n      <div>{pokemon.name}</div>\n      <div>{pokemon.type}</div>\n      <div>{caughtText}</div>\n      {/* don't show the button to catch unless the pokemon has not been caught */}\n      {!pokemon.caught && <button onClick={() => markAsCaught(index)}>Catch</button>}\n    </div>\n  )\n}\n\nfunction App() {\n  const [pokemonList, setPokemonList] = useState(startingPokemonList);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  // this function marks a pokemon as caught using its index\n  const markAsCaught = index => {\n    // these two lines clone the object and allow react to update the state\n    // JSON.stringify converts the array to a string\n    // JSON.parse converts the string to an array\n    // together, they create a clone of the array as a new array\n    const stringPokemonList = JSON.stringify(pokemonList);\n    const clonedPokemonList = JSON.parse(stringPokemonList);\n\n    clonedPokemonList[index].caught = 1; // 1 means the pokemon is caught\n\n    setPokemonList(clonedPokemonList);\n  }\n\n  const filterPokemon = e => {\n    const search = e.target.value.toLowerCase();\n    setSearchTerm(search);\n  }\n\n  const filteredPokemonList = clonedPokemonList.filter(pokemon => {\n    return pokemon.name.toLowerCase().includes(search); // checks if the pokemons name is in the search bar\n  })\n\n  return (\n    <div className=\"App\">\n      <h1>Pokedex</h1>\n      Search: <input className=\"searchBar\" onChange={filterPokemon} />\n      {pokemonList.map((pokemon, index) => {\n        return <Pokemon pokemon={pokemon} index={index} markAsCaught={markAsCaught} />\n      })}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}